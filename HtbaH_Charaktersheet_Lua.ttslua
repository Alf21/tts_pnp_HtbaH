-- TODO update category counter on start

--[[    Character Sheet Template    by: MrStump

You can set up your own character sheet if you follow these steps.

Step 1) Change the character sheet image
    -Right click on the character sheet, click Custom
    -Replace the image URL with one for your character sheet
    -Click import, make sure your sheet loads
    -SAVE THE GAME (the table setup)
    -LOAD FROM THAT SAVE YOU JUST MADE

Step 2) Edit script to fit your character sheet
    -Below you will see some general options, and then the big data table
    -The data table is what determines how many of which buttons are made
        -Checkboxes
        -Counters
        -Textboxes
    -By default, there are 3 of each. You can add more or remove entries
    -If you intend to add/remove, be sure only to add/remove ENTRIES
        -This is what an entry looks like:
            {
                pos   = {-0.977,0.1,-0.589},
                size  = 800,
                state = false
            },
        -Deleting the whole thing would remove that specific item on the sheet
        -Copy and pasting it after another entry would create another
    -Each entry type has unique data points (pos, size, state, etc)
        -Do not try to add in your own data points or remove them individually
        -There is a summary of what each point does at the top of its category

Step 3) Save and check script changes
    -Hit Save & Apply in the script window to save your code
    -You can edit your code as needed and Save+Apply as often as needed
    -When you are finished, make disableSave = false below then Save+apply
        -This enables saving, so your sheet will remember whats on it.

Bonus) Finding/Editing Positions for elements
    I have included a tool to get positions for buttons in {x,y,z} form
    Place it where you want the center of your element to be
    Then copy the table from the notes (lower right of screen)
        You can highlight it and CTRL+C
    Paste it into the data table where needed (pos=)
    If you want to manually tweek the values:
        {0,0,0} is the center of the character sheet
        {1,0,0} is right, {-1,0,0} is left
        {0,0,-1} is up, {0,0,1} is down
        0.1 for Y is the height off of the page.
            If it was 0, it would be down inside the model of the sheet

Begin editing below:    ]]

-- Set this to true while editing and false when you have finished
disableSave = false
-- Remember to set this to false once you are done making changes
-- Then, after you save & apply it, save your game too

-- Color information for button text (r,g,b, values of 0-1)
buttonFontColor = {0, 0, 0}
-- Color information for button background
buttonColor = {1, 1, 1}
-- Change scale of button (Avoid changing if possible)
buttonScale = {0.1, 0.1, 0.1}

-- This is the button placement information
defaultButtonData = {
    -- Add checkboxes
    checkbox = {
        --[[
            pos   = the position (pasted from the helper tool)
            size  = height/width/font_size for checkbox
            state = default starting value for checkbox (true=checked, false=not)
        ]]
    },
    -- Add counters that have a + and - button
    counter = {
        --[[
            pos    = the position (pasted from the helper tool)
            size   = height/width/font_size for counter
            value  = default starting value for counter
            hideBG = if background of counter is hidden (true=hidden, false=not)
            range  = max and min value
        ]]
        -- End of counters
    },
    -- Add editable text boxes
    textbox = {
        --[[
            pos       = the position (pasted from the helper tool)
            rows      = how many lines of text you want for this box
            width     = how wide the text box is
            font_size = size of text. This and "rows" effect overall height
            label     = what is shown when there is no text. "" = nothing
            value     = text entered into box. "" = nothing
            alignment = Number to indicate how you want text aligned (1=Automatic, 2=Left, 3=Center, 4=Right, 5=Justified)
            validation= -- int (1 = None, 2 = Integer, 3 = Float, 4 = Alphanumeric, 5 = Username, 6 = Name),
        ]]--
        -- Name textbox
        {
            pos       = {-0.525, 0.1, -1.795},
            rows      = 1,
            width     = 9200,
            font_size = 1050,
            label     = "Name",
            value     = "",
            alignment = 2,
            validation= 6,
        },
        -- Geschlecht textbox
        {
            pos       = {-1.0225, 0.1, -1.4515},
            rows      = 1,
            width     = 4380,
            font_size = 1050,
            label     = "Geschlecht",
            value     = "",
            alignment = 2,
            validation= 6,
        },
        -- Alter textbox
        {
            pos       = {-0.29, 0.1, -1.4515},
            rows      = 1,
            width     = 2150,
            font_size = 1050,
            label     = "Alter",
            value     = "",
            alignment = 2,
            validation= 2,
        },
        -- Lebenspunkte textbox
        {
            pos       = {0.21, 0.1, -1.4515},
            rows      = 1,
            width     = 2150,
            font_size = 1050,
            label     = "Leben",
            value     = "",
            alignment = 2,
            validation= 2,
        },
        -- Statur textbox
        {
            pos       = {-1.0225, 0.1, -1.18},
            rows      = 1,
            width     = 4380,
            font_size = 1050,
            label     = "Statur",
            value     = "",
            alignment = 2,
            validation= 6,
        },
        -- Religion textbox
        {
            pos       = {-0.0425, 0.1, -1.18},
            rows      = 1,
            width     = 4530,
            font_size = 1050,
            label     = "Religion",
            value     = "",
            alignment = 2,
            validation= 6,
        },
        -- Beruf textbox
        {
            pos       = {-1.0225, 0.1, -0.91},
            rows      = 1,
            width     = 4380,
            font_size = 1050,
            label     = "Beruf",
            value     = "",
            alignment = 2,
            validation= 6,
        },
        -- Familienstand textbox
        {
            pos       = {-0.0425, 0.1, -0.91},
            rows      = 1,
            width     = 4530,
            font_size = 1050,
            label     = "Familie",
            value     = "",
            alignment = 2,
            validation= 6,
        },
        -- TalentPointCounter
        --[[{
          pos       = {0.75, 0.1, 2.05},
          rows      = 1,
          width     = 800,
          font_size = 400,
          label     = "400",
          value     = "400",
          alignment = 2,
          uname     = "talentCounter", -- unique name identifier
          disabledEdit = true,
          validation= 2,
        },]]--
        -- TalentPointCounter
        {
          pos       = {1.36, 0.1, 2.05},
          rows      = 1,
          width     = 800,
          font_size = 400,
          label     = "400",
          value     = "400",
          alignment = 2,
          uname     = "talentCounter", -- unique name identifier
          validation= 2,
        },
        -- End of textboxes
    }
}

for x = 0, 2 do
  -- insert talent text- and checkboxes
  for i = 0, 9 do
    -- Talent textbox
    defaultButtonData.textbox[#defaultButtonData.textbox + 1] = {
        pos       = {-1.205 + 1.04 * x, 0.1, -0.2875 + 0.1435 * i},
        rows      = 1,
        width     = 2700,
        font_size = 500,
        label     = "Talent",
        value     = "",
        alignment = 2,
    }
    
    defaultButtonData.counter[#defaultButtonData.counter + 1] = {
        pos    = {-0.76 + 1.04 * x, 0.1, -0.2875 + 0.1435 * i},
        size   = 400,
        value  = 0,
        hideBG = true,
        range  = {0, 100},
        clickPlus = "updateTalentPointsCounterNeg",
        clickMinus = "updateTalentPointsCounterPos",
        category = "category_" .. x,
    }
  end
end





-- Lua beyond this point, I recommend doing something more fun with your life

function createCategoryLeaders()
  -- create static text
  for x = 0, 2 do
    local cat = "category_" .. x
    
    self.setVar(cat .. "_leader", createStaticText({
      pos    = {-1.155 + 1.04 * x, 0.1, -0.4575},
      size   = 800,
      value  = getCategoryLeaderValue(cat),
      hideBG = true,
      uname  = cat .. "_leader",
    }))
    
    updateTalentCategory(cat)
  end
end

function createBlitzpoints()
  -- create static text
  for x = 0, 2 do
    local cat = "category_" .. x
    
    self.setVar(cat .. "_blitz", createStaticText({
      pos    = {-0.725 + 1.04 * x, 0.1, -0.4575},
      size   = 500,
      value  = getCategoryLeaderValue(cat),
      hideBG = true,
      uname  = cat .. "_blitz",
    }))
    
    updateBlitzPoints(cat)
  end
end

-- Save function
function updateSave()
    saved_data = JSON.encode(ref_buttonData)
    
    if disableSave then 
      saved_data = "" 
    end
    
    self.script_state = saved_data
end

-- Startup procedure
function onload(saved_data)
    if disableSave then 
      saved_data = "" 
    end
    
    if saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        
        ref_buttonData = loaded_data
    else
        ref_buttonData = defaultButtonData
    end

    talentPointCounterIndex = nil
    
    if ref_buttonData.textbox then
      for k, v in ipairs(ref_buttonData.textbox) do
        if v.uname and v.uname == "talentCounter" then
          talentPointCounterIndex = k
        end
      end
    end
    
    createCheckbox()
    createCounter()
    createTextbox()
    createCategoryLeaders()
    createBlitzpoints()
end



-- Click functions for buttons



-- Checks or unchecks the given box
function click_checkbox(tableIndex, buttonIndex)
    if ref_buttonData.checkbox[tableIndex].state == true then
        ref_buttonData.checkbox[tableIndex].state = false
        
        self.editButton({
          index = buttonIndex, 
          label = ""
        })
    else
        ref_buttonData.checkbox[tableIndex].state = true
        
        self.editButton({
          index = buttonIndex, 
          label = string.char(10008)
        })
    end

    updateSave()
end

-- Applies value to given counter display
function check_click_counter(tableIndex, buttonIndex, amount)
    local newValue = ref_buttonData.counter[tableIndex].value + amount
  
    return not ref_buttonData.counter[tableIndex].range or ref_buttonData.counter[tableIndex].range[1] <= newValue and ref_buttonData.counter[tableIndex].range[2] >= newValue
end

function click_counter(tableIndex, buttonIndex, amount)
    local newValue = ref_buttonData.counter[tableIndex].value + amount
      
    ref_buttonData.counter[tableIndex].value = newValue
    
    self.editButton({
      index = buttonIndex, 
      label = ref_buttonData.counter[tableIndex].value
    })
    
    local category = ref_buttonData.counter[tableIndex].category
    
    if category then
      updateCategoryCounter(category)
      updateBlitzPoints(category)
    end
    
    updateSave()
end

-- Updates saved value for given text box
function click_textbox(i, value, selected)
    if selected == false then
        ref_buttonData.textbox[i].value = value
        
        updateSave()
    end
end

-- Dud function for if you have a background on a counter
function click_none() end



-- Button creation



-- Makes checkboxes
function createCheckbox()
    for i, data in ipairs(ref_buttonData.checkbox) do
        -- Sets up reference function
        local funcName = "checkbox" .. i
        
        local func = function(obj) 
          click_checkbox(i, obj.index) 
        end
        
        self.setVar(funcName, func)
        
        -- Sets up label
        local label = ""
        
        if data.state == true then 
          label = string.char(10008) 
        end
        
        -- Creates button and counts it
        self.createButton({
            label = label, 
            click_function = funcName, 
            function_owner = self,
            position = data.pos,
            height = data.size, 
            width = data.size,
            font_size = data.size, 
            scale = buttonScale,
            color = buttonColor, 
            font_color = buttonFontColor
        })
    end
end

-- Makes counters
function createCounter()
    for i, data in ipairs(ref_buttonData.counter) do
        -- Sets up label
        local label = data.value
        
        -- Sets height/width for display
        local size = data.size
        
        if data.hideBG == true then 
          size = 0 
        end
        
        -- Creates button and counts it
        self.createButton({
            label = label, 
            click_function = "click_none", 
            function_owner = self,
            position = data.pos, 
            height = size, 
            width = size,
            font_size = data.size, 
            scale = buttonScale,
            color = buttonColor, 
            font_color = buttonFontColor
        })
        
        -- Sets up display
        local tmp = self.getButtons()
        local displayNumber = tmp[#tmp].index
        
        ref_buttonData.counter[i].index = displayNumber

        -- Sets up add 1
        local funcName = "counterAdd" .. i
        
        local func = function() 
          if not check_click_counter(i, displayNumber, 1) then return end
          
          -- hacky workaround
          if data.clickPlus and _G[data.clickPlus] then
            if _G[data.clickPlus]() then
              click_counter(i, displayNumber, 1)
            end
          else
            click_counter(i, displayNumber, 1)
          end
        end
        
        self.setVar(funcName, func)
        
        -- Sets up label
        local label = "+"
        
        -- Sets up position
        local offsetDistance = (data.size * 0.5 + data.size * 0.25) * (buttonScale[1] * 0.002)
        local pos = {data.pos[1] + offsetDistance, data.pos[2], data.pos[3]}
        
        -- Sets up size
        local size = data.size * 0.5
        
        -- Creates button and counts it
        self.createButton({
            label = label, 
            click_function = funcName, 
            function_owner = self,
            position = pos, 
            height = size, 
            width = size,
            font_size = size, 
            scale = buttonScale,
            color = buttonColor, 
            font_color = buttonFontColor
        })

        -- Sets up subtract 1
        local funcName = "counterSub" .. i
        
        local func = function() 
          if not check_click_counter(i, displayNumber, -1) then return end
          
          -- hacky workaround
          if data.clickMinus and _G[data.clickMinus] then
            if _G[data.clickMinus]() then
              click_counter(i, displayNumber, -1)
            end
          else
            click_counter(i, displayNumber, -1)
          end
        end
        
        self.setVar(funcName, func)
        
        -- Sets up label
        local label = "-"
        
        -- Set up position
        local pos = {data.pos[1] - offsetDistance, data.pos[2], data.pos[3]}
        
        -- Creates button and counts it
        self.createButton({
            label = label, 
            click_function = funcName, 
            function_owner = self,
            position = pos, 
            height = size, 
            width = size,
            font_size = size, 
            scale = buttonScale,
            color = buttonColor, 
            font_color = buttonFontColor
        })
    end
end

-- hacky workaround
function updateTalentPointsCounterNeg()
  return updateTalentPointsCounter(-1)
end

-- hacky workaround
function updateTalentPointsCounterPos()
  return updateTalentPointsCounter(1)
end

function updateTalentPointsCounter(amount)
  local btn = ref_buttonData.textbox[talentPointCounterIndex]
  
  if talentPointCounterIndex and btn then    
    local value = btn.value
    
    if type(value) ~= "number" then
      if not pcall(function() 
        value = tonumber(value)
      end) then
        value = 0
      end
    end
    
    local newValue = value + amount
        
    if newValue < 0 then
      return false
    end
        
    ref_buttonData.textbox[talentPointCounterIndex].value = newValue
    
    self.editInput({
      index = btn.index,
      label = newValue,
      value = newValue,
    })
        
    updateSave()
    
    return true
  end
end

function createTextbox()
    for i, data in ipairs(ref_buttonData.textbox) do
        -- Sets up reference function
        local funcName = "textbox" .. i
        
        local func = function(_, _, val, sel)
          if not ref_buttonData.textbox[i].disabledEdit then
            click_textbox(i, val, sel) 
          else
            self.editInput({
              index = ref_buttonData.textbox[i].index,
              label = ref_buttonData.textbox[i].label,
              value = ref_buttonData.textbox[i].value,
            })
          end
        end
        
        self.setVar(funcName, func)

        self.createInput({
            input_function = funcName,
            function_owner = self,
            label          = data.label,
            alignment      = data.alignment,
            position       = data.pos,
            scale          = buttonScale,
            width          = data.width,
            height         = data.font_size * data.rows + 24,
            font_size      = data.font_size,
            color          = buttonColor,
            font_color     = buttonFontColor,
            value          = data.value,
            validation     = data.validation or 1,
        })
        
        local tmp = self.getInputs()
        data.index = tmp[#tmp].index
    end
end

function createStaticText(data)
    -- Sets up label
    local label = data.value
    
    -- Sets height/width for display
    local size = data.size
    
    if data.hideBG == true then 
      size = 0 
    end
    
    -- Creates button and counts it
    self.createButton({
        label = label, 
        click_function = "click_none", 
        function_owner = self,
        position = data.pos, 
        height = size, 
        width = size,
        font_size = data.size, 
        scale = buttonScale,
        color = buttonColor, 
        font_color = buttonFontColor
    })
    
    local tmp = self.getButtons()
    data.index = tmp[#tmp].index
    
    return data.index
end

function round(num, numDecimalPlaces)
  local mult = 10 ^ (numDecimalPlaces or 0)
  
  return math.floor(num * mult + 0.5) / mult
end

function getCategoryLeaderValue(category)
  local points = 0
  
  if not ref_buttonData then
    return 0
  end
  
  for i, data in ipairs(ref_buttonData.counter) do
    if data.category and data.category == category then
      points = points + tonumber(data.value)
    end
  end
  
  return round(points / 10)
end

function updateCategoryCounter(category)
  local points = getCategoryLeaderValue(category)
  local leader = self.getVar(category .. "_leader")
    
  if leader then
    self.editButton({
      index = leader, 
      label = points
    })
  end
  
  updateTalentCategory(category)
end

function updateTalentCategory(category)
  if not ref_buttonData then return end
  
  local additionalPoints = getCategoryLeaderValue(category)
  
  for i, data in ipairs(ref_buttonData.counter) do
    if data.category and data.category == category and (data.value or 0) > 0 then
      self.editButton({
        index = data.index,
        label = data.value + additionalPoints
      })
    end
  end
end

function updateBlitzPoints(category)
  local points = round(getCategoryLeaderValue(category) / 10)
  local blitz = self.getVar(category .. "_blitz")
    
  if blitz then
    self.editButton({
      index = blitz, 
      label = points
    })
  end
end